---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  Practice template used to create the Wildrydes stack

Metadata:
  Module1:
    Description: "Static Web Hosting"
  Module2:
    Description: "User Management"
  Module3:
    Description: "Servless Service Backend"
  Module4:
    Description: "RESTful APIs"

#Parameters:
#  set of parameters
#
#Mappings:
#  set of mappings
#
#Conditions:
#  set of conditions

Transform: "AWS::Serverless-2016-10-31"

Resources:

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: myrydes-nate-baker
      Tags:
        -
          Key: Project
          Value: myrydes
      WebsiteConfiguration:
        IndexDocument: index.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: myrydes-nate-baker
      PolicyDocument:
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource": "arn:aws:s3:::myrydes-nate-baker/*"
                }
            ]
        }
    DependsOn: Bucket

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
      UserPoolName: MyRydes
      UserPoolTags:
        Project: myrydes

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
        ClientName: MyRydesWebApp
        GenerateSecret: False
        UserPoolId: !Ref UserPool
    DependsOn: UserPool

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: RideId
          AttributeType: S
      KeySchema:
        -
          AttributeName: RideId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: MyRides
      Tags:
        -
          Key: Project
          Value: myrydes

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBWriteAccess
          PolicyDocument:
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": "dynamodb:PutItem",
                        "Resource": !GetAtt DynamoDBTable.Arn
                    }
                ]
            }
      RoleName: MyRydesLambda
    DependsOn: DynamoDBTable

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: >
          const randomBytes = require('crypto').randomBytes;

          const AWS = require('aws-sdk');

          const ddb = new AWS.DynamoDB.DocumentClient();

          const fleet = [
              {
                  Name: 'Bucephalus',
                  Color: 'Golden',
                  Gender: 'Male',
              },
              {
                  Name: 'Shadowfax',
                  Color: 'White',
                  Gender: 'Male',
              },
              {
                  Name: 'Rocinante',
                  Color: 'Yellow',
                  Gender: 'Female',
              },
          ];

          exports.handler = (event, context, callback) => {
              if (!event.requestContext.authorizer) {
                errorResponse('Authorization not configured', context.awsRequestId, callback);
                return;
              }

              const rideId = toUrlString(randomBytes(16));
              console.log('Received event (', rideId, '): ', event);

              // Because we're using a Cognito User Pools authorizer, all of the claims
              // included in the authentication token are provided in the request context.
              // This includes the username as well as other attributes.
              const username = event.requestContext.authorizer.claims['cognito:username'];

              // The body field of the event in a proxy integration is a raw string.
              // In order to extract meaningful values, we need to first parse this string
              // into an object. A more robust implementation might inspect the Content-Type
              // header first and use a different parsing strategy based on that value.
              const requestBody = JSON.parse(event.body);

              const pickupLocation = requestBody.PickupLocation;

              const unicorn = findUnicorn(pickupLocation);

              recordRide(rideId, username, unicorn).then(() => {
                  // You can use the callback function to provide a return value from your Node.js
                  // Lambda functions. The first parameter is used for failed invocations. The
                  // second parameter specifies the result data of the invocation.

                  // Because this Lambda function is called by an API Gateway proxy integration
                  // the result object must use the following structure.
                  callback(null, {
                      statusCode: 201,
                      body: JSON.stringify({
                          RideId: rideId,
                          Unicorn: unicorn,
                          UnicornName: unicorn.Name,
                          Eta: '30 seconds',
                          Rider: username,
                      }),
                      headers: {
                          'Access-Control-Allow-Origin': '*',
                      },
                  });
              }).catch((err) => {
                  console.error(err);

                  // If there is an error during processing, catch it and return
                  // from the Lambda function successfully. Specify a 500 HTTP status
                  // code and provide an error message in the body. This will provide a
                  // more meaningful error response to the end client.
                  errorResponse(err.message, context.awsRequestId, callback)
              });
          };

          // This is where you would implement logic to find the optimal unicorn for
          // this ride, possibly invoking another Lambda function as a microservice.
          // For simplicity, we'll just pick a unicorn at random.
          function findUnicorn(pickupLocation) {
              console.log('Finding unicorn for ', pickupLocation.Latitude, ', ', pickupLocation.Longitude);
              return fleet[Math.floor(Math.random() * fleet.length)];
          }

          function recordRide(rideId, username, unicorn) {
              return ddb.put({
                  TableName: process.env.TABLE_NAME,
                  Item: {
                      RideId: rideId,
                      User: username,
                      Unicorn: unicorn,
                      UnicornName: unicorn.Name,
                      RequestTime: new Date().toISOString(),
                  },
              }).promise();
          }

          function toUrlString(buffer) {
              return buffer.toString('base64')
                  .replace(/\+/g, '-')
                  .replace(/\//g, '_')
                  .replace(/=/g, '');
          }

          function errorResponse(errorMessage, awsRequestId, callback) {
            callback(null, {
              statusCode: 500,
              body: JSON.stringify({
                Error: errorMessage,
                Reference: awsRequestId,
              }),
              headers: {
                'Access-Control-Allow-Origin': '*',
              },
            });
          }
      Description: "Handles unicorn requests"
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
      FunctionName: RequestMyUnicorn
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Tags:
        -
          Key: Project
          Value: myrydes
    DependsOn: LambdaExecutionRole

Outputs:
  WebsiteURL:
    Description: Use this endpoint to validate your static website
    Value: !GetAtt Bucket.WebsiteURL
  userPoolId:
    Description: Use this generated ID in website/js/config.js
    Value: !Ref UserPool
  userPoolClientId:
    Description: Use this generated ID in website/js/config.js
    Value: !Ref UserPoolClient