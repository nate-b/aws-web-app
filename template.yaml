---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  Practice template used to create the Wildrydes stack

Metadata:
  Module1:
    Description: "Static Web Hosting"
  Module2:
    Description: "User Management"
  Module3:
    Description: "Servless Service Backend"
  Module4:
    Description: "RESTful APIs"

#Parameters:
#  set of parameters
#
#Mappings:
#  set of mappings
#
#Conditions:
#  set of conditions

Transform: "AWS::Serverless-2016-10-31"

Resources:

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: myrydes-nate-baker
      Tags:
        -
          Key: Project
          Value: myrydes
      WebsiteConfiguration:
        IndexDocument: index.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource" : { "Fn::Join" : [
                                      "", [ "arn:aws:s3:::", { "Ref" : "Bucket" } , "/*" ]
                                   ] }
                }
            ]
        }
    DependsOn: Bucket

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
      UserPoolName: MyRydes
      UserPoolTags:
        Project: myrydes

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
        ClientName: MyRydesWebApp
        GenerateSecret: False
        UserPoolId: !Ref UserPool
    DependsOn: UserPool

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: RideId
          AttributeType: S
      KeySchema:
        -
          AttributeName: RideId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: MyRides
      Tags:
        -
          Key: Project
          Value: myrydes

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBWriteAccess
          PolicyDocument:
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": "dynamodb:PutItem",
                        "Resource": !GetAtt DynamoDBTable.Arn
                    }
                ]
            }
      RoleName: MyRydesLambda
    DependsOn: DynamoDBTable

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Handles unicorn requests"
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
      FunctionName: RequestMyUnicorn
      Handler: requestUnicorn.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Tags:
        -
          Key: Project
          Value: myrydes
    DependsOn: LambdaExecutionRole

Outputs:
  WebsiteURL:
    Description: Use this endpoint to validate your static website
    Value: !GetAtt Bucket.WebsiteURL
  userPoolId:
    Description: Use this generated ID in website/js/config.js
    Value: !Ref UserPool
  userPoolClientId:
    Description: Use this generated ID in website/js/config.js
    Value: !Ref UserPoolClient