---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  Practice template used to create the Wildrydes stack

Metadata:
  Module1:
    Description: "Static Web Hosting"
  Module2:
    Description: "User Management"
  Module3:
    Description: "Servless Service Backend"
  Module4:
    Description: "RESTful APIs"

#Parameters:
#  set of parameters
#
#Mappings:
#  set of mappings
#
#Conditions:
#  set of conditions

Transform: "AWS::Serverless-2016-10-31"

Resources:

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: myrydes-nate-baker
      Tags:
        -
          Key: Project
          Value: myrydes
      WebsiteConfiguration:
        IndexDocument: index.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource" : { "Fn::Join" : [
                                      "", [ "arn:aws:s3:::", { "Ref" : "Bucket" } , "/*" ]
                                   ] }
                }
            ]
        }

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
      UserPoolName: MyRydes
      UserPoolTags:
        Project: myrydes

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
        ClientName: MyRydesWebApp
        GenerateSecret: False
        UserPoolId: !Ref UserPool

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: RideId
          AttributeType: S
      KeySchema:
        -
          AttributeName: RideId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: MyRides
      Tags:
        -
          Key: Project
          Value: myrydes

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBWriteAccess
          PolicyDocument:
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": "dynamodb:PutItem",
                        "Resource": !GetAtt DynamoDBTable.Arn
                    }
                ]
            }
      RoleName: MyRydesLambda
    DependsOn: DynamoDBTable

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Handles unicorn requests"
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
      FunctionName: RequestMyUnicorn
      Handler: requestUnicorn.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Tags:
        -
          Key: Project
          Value: myrydes

  RESTAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: "Provides endpoint for Lambda RequestMyUnicorn function"
      EndpointConfiguration:
        Types:
          - EDGE
      Name: MyRydes

  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      IdentitySource: "method.request.header.Authorization"
      Name: MyRydes
      ProviderARNs:
        - !GetAtt UserPool.Arn
      RestApiId: !Ref RESTAPI
      Type: COGNITO_USER_POOLS

  APIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RESTAPI.RootResourceId
      PathPart: ride
      RestApiId: !Ref RESTAPI

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join ["",["arn:aws:execute-api:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !Ref RESTAPI,"/*"]]

  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          -
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        -
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          StatusCode: '200'
      ResourceId: !Ref APIResource
      RestApiId: !Ref RESTAPI

  PostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Join ["", ["arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt LambdaFunction.Arn, "/invocations"] ]
      MethodResponses:
        -
          ResponseModels:
            application/json: 'Empty'
          StatusCode: '200'
      ResourceId: !Ref APIResource
      RestApiId: !Ref RESTAPI

  Deployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: "Deploy the API Gateway and REST services"
      RestApiId: !Ref RESTAPI
    DependsOn:
      - OptionsMethod
      - PostMethod

  ProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref Deployment
      Description: "Stage for deploying my REST API"
      RestApiId: !Ref RESTAPI
      StageName: prod


Outputs:
  WebsiteURL:
    Description: Use this endpoint to validate your static website
    Value: !GetAtt Bucket.WebsiteURL
  userPoolId:
    Description: Use this generated ID in website/js/config.js
    Value: !Ref UserPool
  userPoolClientId:
    Description: Use this generated ID in website/js/config.js
    Value: !Ref UserPoolClient
  invokeURL:
    Description: Use this generated URL in website/js/config.js
    Value: !Join ["", ["https://", !Ref RESTAPI, ".execute-api.", !Ref "AWS::Region", ".amazonaws.com/", !Ref ProdStage] ]